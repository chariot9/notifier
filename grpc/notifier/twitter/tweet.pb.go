// Code generated by protoc-gen-go. DO NOT EDIT.
// source: notifier/src/twitter/tweet.proto

package twitter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TweetRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TweetRequest) Reset()         { *m = TweetRequest{} }
func (m *TweetRequest) String() string { return proto.CompactTextString(m) }
func (*TweetRequest) ProtoMessage()    {}
func (*TweetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a644eeb6c344a28c, []int{0}
}

func (m *TweetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TweetRequest.Unmarshal(m, b)
}
func (m *TweetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TweetRequest.Marshal(b, m, deterministic)
}
func (m *TweetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TweetRequest.Merge(m, src)
}
func (m *TweetRequest) XXX_Size() int {
	return xxx_messageInfo_TweetRequest.Size(m)
}
func (m *TweetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TweetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TweetRequest proto.InternalMessageInfo

type TweetResponse struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TweetResponse) Reset()         { *m = TweetResponse{} }
func (m *TweetResponse) String() string { return proto.CompactTextString(m) }
func (*TweetResponse) ProtoMessage()    {}
func (*TweetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a644eeb6c344a28c, []int{1}
}

func (m *TweetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TweetResponse.Unmarshal(m, b)
}
func (m *TweetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TweetResponse.Marshal(b, m, deterministic)
}
func (m *TweetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TweetResponse.Merge(m, src)
}
func (m *TweetResponse) XXX_Size() int {
	return xxx_messageInfo_TweetResponse.Size(m)
}
func (m *TweetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TweetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TweetResponse proto.InternalMessageInfo

func (m *TweetResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *TweetResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Tweet struct {
	CreatedAt            string   `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	IdStr                string   `protobuf:"bytes,3,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`
	Text                 string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Source               string   `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Truncated            bool     `protobuf:"varint,6,opt,name=truncated,proto3" json:"truncated,omitempty"`
	InReplyToStatusId    string   `protobuf:"bytes,7,opt,name=in_reply_to_status_id,json=inReplyToStatusId,proto3" json:"in_reply_to_status_id,omitempty"`
	InReplyToStatusIdStr string   `protobuf:"bytes,8,opt,name=in_reply_to_status_id_str,json=inReplyToStatusIdStr,proto3" json:"in_reply_to_status_id_str,omitempty"`
	InReplyToUserId      string   `protobuf:"bytes,9,opt,name=in_reply_to_user_id,json=inReplyToUserId,proto3" json:"in_reply_to_user_id,omitempty"`
	InReplyToUserIdStr   string   `protobuf:"bytes,10,opt,name=in_reply_to_user_id_str,json=inReplyToUserIdStr,proto3" json:"in_reply_to_user_id_str,omitempty"`
	InReplyToScreenName  string   `protobuf:"bytes,11,opt,name=in_reply_to_screen_name,json=inReplyToScreenName,proto3" json:"in_reply_to_screen_name,omitempty"`
	User                 *User    `protobuf:"bytes,12,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tweet) Reset()         { *m = Tweet{} }
func (m *Tweet) String() string { return proto.CompactTextString(m) }
func (*Tweet) ProtoMessage()    {}
func (*Tweet) Descriptor() ([]byte, []int) {
	return fileDescriptor_a644eeb6c344a28c, []int{2}
}

func (m *Tweet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tweet.Unmarshal(m, b)
}
func (m *Tweet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tweet.Marshal(b, m, deterministic)
}
func (m *Tweet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tweet.Merge(m, src)
}
func (m *Tweet) XXX_Size() int {
	return xxx_messageInfo_Tweet.Size(m)
}
func (m *Tweet) XXX_DiscardUnknown() {
	xxx_messageInfo_Tweet.DiscardUnknown(m)
}

var xxx_messageInfo_Tweet proto.InternalMessageInfo

func (m *Tweet) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Tweet) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tweet) GetIdStr() string {
	if m != nil {
		return m.IdStr
	}
	return ""
}

func (m *Tweet) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Tweet) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Tweet) GetTruncated() bool {
	if m != nil {
		return m.Truncated
	}
	return false
}

func (m *Tweet) GetInReplyToStatusId() string {
	if m != nil {
		return m.InReplyToStatusId
	}
	return ""
}

func (m *Tweet) GetInReplyToStatusIdStr() string {
	if m != nil {
		return m.InReplyToStatusIdStr
	}
	return ""
}

func (m *Tweet) GetInReplyToUserId() string {
	if m != nil {
		return m.InReplyToUserId
	}
	return ""
}

func (m *Tweet) GetInReplyToUserIdStr() string {
	if m != nil {
		return m.InReplyToUserIdStr
	}
	return ""
}

func (m *Tweet) GetInReplyToScreenName() string {
	if m != nil {
		return m.InReplyToScreenName
	}
	return ""
}

func (m *Tweet) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*TweetRequest)(nil), "notifier.src.twitter.TweetRequest")
	proto.RegisterType((*TweetResponse)(nil), "notifier.src.twitter.TweetResponse")
	proto.RegisterType((*Tweet)(nil), "notifier.src.twitter.Tweet")
}

func init() { proto.RegisterFile("notifier/src/twitter/tweet.proto", fileDescriptor_a644eeb6c344a28c) }

var fileDescriptor_a644eeb6c344a28c = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x71, 0xfe, 0x36, 0xd3, 0x52, 0xc4, 0x36, 0x09, 0xc6, 0x2d, 0x22, 0x32, 0x97, 0x1c,
	0x90, 0x5d, 0x5a, 0x24, 0x4e, 0x1c, 0x40, 0xe2, 0xd0, 0x0b, 0x48, 0x4e, 0xb9, 0x20, 0x21, 0x6b,
	0xbb, 0x9e, 0x46, 0x2b, 0xd5, 0xbb, 0x66, 0x77, 0x9c, 0xd2, 0x2b, 0xaf, 0xc0, 0xfb, 0xf0, 0x02,
	0x1c, 0x79, 0x05, 0x1e, 0x04, 0xed, 0xc6, 0x6e, 0x81, 0x46, 0xbd, 0xed, 0xcc, 0x7c, 0xbf, 0xf9,
	0x46, 0xf2, 0x67, 0x98, 0x29, 0x4d, 0xf2, 0x5c, 0xa2, 0x49, 0xad, 0x11, 0x29, 0x5d, 0x4a, 0x22,
	0x34, 0x29, 0x5d, 0x22, 0x52, 0x52, 0x19, 0x4d, 0x9a, 0x8d, 0x5b, 0x45, 0x62, 0x8d, 0x48, 0x1a,
	0x45, 0xf4, 0x74, 0x23, 0x57, 0x5b, 0x34, 0x6b, 0x2c, 0xda, 0x5f, 0x6a, 0xbd, 0xbc, 0xc0, 0xd4,
	0x57, 0x67, 0xf5, 0x79, 0x8a, 0x65, 0x45, 0x57, 0xcd, 0xf0, 0xa0, 0x19, 0xf2, 0x4a, 0xa6, 0x5c,
	0x29, 0x4d, 0x9c, 0xa4, 0x56, 0x76, 0x3d, 0x8d, 0x77, 0x61, 0xe7, 0xd4, 0x1d, 0x90, 0xe1, 0x97,
	0x1a, 0x2d, 0xc5, 0xaf, 0xe1, 0x7e, 0x53, 0xdb, 0x4a, 0x2b, 0x8b, 0x8c, 0x41, 0x4f, 0xe8, 0x02,
	0xc3, 0x60, 0x16, 0xcc, 0x47, 0x99, 0x7f, 0xb3, 0x10, 0x86, 0x25, 0x5a, 0xcb, 0x97, 0x18, 0x76,
	0x7c, 0xbb, 0x2d, 0xe3, 0x9f, 0x5d, 0xe8, 0x7b, 0x9e, 0x3d, 0x01, 0x10, 0x06, 0x39, 0x61, 0x91,
	0x73, 0x6a, 0xe8, 0x51, 0xd3, 0x79, 0x43, 0x6c, 0x17, 0x3a, 0xb2, 0xf0, 0x74, 0x37, 0xeb, 0xc8,
	0x82, 0x4d, 0x60, 0x20, 0x8b, 0xdc, 0x92, 0x09, 0xbb, 0x5e, 0xda, 0x97, 0xc5, 0x82, 0x8c, 0x73,
	0x27, 0xfc, 0x4a, 0x61, 0x6f, 0xed, 0xee, 0xde, 0x6c, 0x0a, 0x03, 0xab, 0x6b, 0x23, 0x30, 0xec,
	0xfb, 0x6e, 0x53, 0xb1, 0x03, 0x18, 0x91, 0xa9, 0x95, 0x70, 0x0e, 0xe1, 0x60, 0x16, 0xcc, 0xb7,
	0xb2, 0x9b, 0x06, 0x3b, 0x84, 0x89, 0x54, 0xb9, 0xc1, 0xea, 0xe2, 0x2a, 0x27, 0x9d, 0x5b, 0xe2,
	0x54, 0xdb, 0x5c, 0x16, 0xe1, 0xd0, 0x2f, 0x79, 0x28, 0x55, 0xe6, 0x66, 0xa7, 0x7a, 0xe1, 0x27,
	0x27, 0x05, 0x7b, 0x05, 0x8f, 0x37, 0x12, 0xfe, 0xca, 0x2d, 0x4f, 0x8d, 0x6f, 0x51, 0xee, 0xe8,
	0xe7, 0xb0, 0xf7, 0x37, 0xe8, 0x3e, 0x94, 0x33, 0x1a, 0x79, 0xe4, 0xc1, 0x35, 0xf2, 0xd1, 0xa2,
	0x39, 0x29, 0xd8, 0x31, 0x3c, 0xda, 0xa0, 0xf6, 0x26, 0xe0, 0x09, 0xf6, 0x1f, 0xe1, 0x2c, 0x5e,
	0xfe, 0x0b, 0x59, 0x61, 0x10, 0x55, 0xae, 0x78, 0x89, 0xe1, 0xb6, 0x87, 0xf6, 0x6e, 0x2e, 0xf3,
	0xb3, 0xf7, 0xbc, 0x44, 0x96, 0x40, 0xcf, 0xad, 0x0f, 0x77, 0x66, 0xc1, 0x7c, 0xfb, 0x28, 0x4a,
	0x36, 0xa5, 0x2d, 0x71, 0x26, 0x99, 0xd7, 0x1d, 0xfd, 0x08, 0x9a, 0x74, 0x2c, 0xd0, 0xac, 0xa4,
	0x40, 0xf6, 0x19, 0x06, 0x0b, 0x32, 0xc8, 0x4b, 0x36, 0x4d, 0xd6, 0xb1, 0x4a, 0xda, 0xcc, 0x25,
	0xef, 0x5c, 0xe6, 0xa2, 0xfd, 0xcd, 0x4b, 0xfd, 0x96, 0x38, 0xfa, 0xf6, 0xeb, 0xf7, 0xf7, 0xce,
	0x38, 0x66, 0xe9, 0xea, 0x45, 0x6a, 0xfd, 0xa2, 0x36, 0xce, 0xf3, 0xe0, 0x30, 0x60, 0x1f, 0x60,
	0x98, 0xa1, 0x40, 0xb9, 0x42, 0x76, 0xd7, 0x9e, 0xe8, 0xd9, 0x1d, 0xc3, 0x36, 0xb8, 0xf1, 0xbd,
	0x79, 0xf0, 0x36, 0x85, 0xa9, 0x13, 0x94, 0x5c, 0xaa, 0xf5, 0xa1, 0xad, 0xf6, 0xd3, 0x64, 0x69,
	0x2a, 0x91, 0x5e, 0xff, 0x58, 0x4d, 0xfb, 0x6c, 0xe0, 0x55, 0xc7, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x40, 0x73, 0x75, 0xfd, 0xab, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TweetServiceClient is the client API for TweetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TweetServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (TweetService_StreamClient, error)
	Receive(ctx context.Context, opts ...grpc.CallOption) (TweetService_ReceiveClient, error)
}

type tweetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTweetServiceClient(cc grpc.ClientConnInterface) TweetServiceClient {
	return &tweetServiceClient{cc}
}

func (c *tweetServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (TweetService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TweetService_serviceDesc.Streams[0], "/notifier.src.twitter.TweetService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tweetServiceStreamClient{stream}
	return x, nil
}

type TweetService_StreamClient interface {
	Send(*empty.Empty) error
	Recv() (*Tweet, error)
	grpc.ClientStream
}

type tweetServiceStreamClient struct {
	grpc.ClientStream
}

func (x *tweetServiceStreamClient) Send(m *empty.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tweetServiceStreamClient) Recv() (*Tweet, error) {
	m := new(Tweet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tweetServiceClient) Receive(ctx context.Context, opts ...grpc.CallOption) (TweetService_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TweetService_serviceDesc.Streams[1], "/notifier.src.twitter.TweetService/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &tweetServiceReceiveClient{stream}
	return x, nil
}

type TweetService_ReceiveClient interface {
	Send(*Tweet) error
	CloseAndRecv() (*TweetResponse, error)
	grpc.ClientStream
}

type tweetServiceReceiveClient struct {
	grpc.ClientStream
}

func (x *tweetServiceReceiveClient) Send(m *Tweet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tweetServiceReceiveClient) CloseAndRecv() (*TweetResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TweetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TweetServiceServer is the server API for TweetService service.
type TweetServiceServer interface {
	Stream(TweetService_StreamServer) error
	Receive(TweetService_ReceiveServer) error
}

// UnimplementedTweetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTweetServiceServer struct {
}

func (*UnimplementedTweetServiceServer) Stream(srv TweetService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (*UnimplementedTweetServiceServer) Receive(srv TweetService_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}

func RegisterTweetServiceServer(s *grpc.Server, srv TweetServiceServer) {
	s.RegisterService(&_TweetService_serviceDesc, srv)
}

func _TweetService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TweetServiceServer).Stream(&tweetServiceStreamServer{stream})
}

type TweetService_StreamServer interface {
	Send(*Tweet) error
	Recv() (*empty.Empty, error)
	grpc.ServerStream
}

type tweetServiceStreamServer struct {
	grpc.ServerStream
}

func (x *tweetServiceStreamServer) Send(m *Tweet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tweetServiceStreamServer) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TweetService_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TweetServiceServer).Receive(&tweetServiceReceiveServer{stream})
}

type TweetService_ReceiveServer interface {
	SendAndClose(*TweetResponse) error
	Recv() (*Tweet, error)
	grpc.ServerStream
}

type tweetServiceReceiveServer struct {
	grpc.ServerStream
}

func (x *tweetServiceReceiveServer) SendAndClose(m *TweetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tweetServiceReceiveServer) Recv() (*Tweet, error) {
	m := new(Tweet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TweetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notifier.src.twitter.TweetService",
	HandlerType: (*TweetServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TweetService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Receive",
			Handler:       _TweetService_Receive_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "notifier/src/twitter/tweet.proto",
}
